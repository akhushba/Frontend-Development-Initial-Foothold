h2 + p{
    color: orange;
}
/* adjacent combinator: selects elements directly after the first element */

h1 ~ p{
    background-color: aqua;
}
/* sibling combinator: selects siblings (have same parent) which come after it*/

h2:hover{
    text-decoration: line-through;
}

input:placeholder-shown{
    background-color: red;
}

body:not(h1, h2, h3, h4, h5, h6){
    border: 1px solid green;
}

/* pseudo elements
may be restrictions with styles
*/

p::first-line{
    text-decoration: line-through black;
}
/* first letter also exists, before/after are interesting */

p::selection{
    background-color: grey;
}

/* most specific?
class specifications trump general specs 
.class{color: blue;}
p{color: orange;}
paragraphs in .class will be blue not orange

competetive specs will surrender to most specific ones, if not repeated, any specs that apply to the content will be shown

Most Specific to Least
1. Inline styles (ex. writing <p style="color: red"> </p>), para will be red no matter who else you label it
2. ID selectors
3. Class | Attribute | Pseudo-class
4. Type | Pseudo elements

selector specificity (# of id, # of class, # of type)
calculates how specific the selector is
browser looks for largest number starting from left to see which is more specific

besides specificity (which targets selectors at play)
cascade is an algorithm which decides which rule wins when therre's a conflict

Most likely to be final style to least
1. Importance
2. Origin (browser style < personal style)
3. Specificty 
4. Position (order of rules, last one defined wins)

https://2019.wattenberger.com/blog/css-cascade#level_1_1
*/
